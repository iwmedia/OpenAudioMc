plugins {
    id 'java-library'
    id 'maven-publish'
    id("com.gradleup.shadow") version "9.0.0-rc1"
}

description = 'OpenAudioMc Plugin'

dependencies {
    // Core dependencies (these will be shaded)
    implementation deps.nbtApi
    implementation(deps.storm) {
        exclude group: 'org.projectlombok', module: 'lombok-maven'
        exclude group: 'org.spigotmc', module: 'spigot-api'
    }

    implementation 'org.yaml:snakeyaml:2.0'
    implementation(deps.okhttp) {
        exclude group: 'com.google.android', module: 'android'
    }

    implementation 'io.socket:socket.io-client:1.0.0'
    implementation 'io.lettuce:lettuce-core:6.3.0.RELEASE'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'

    // OA (these will be shaded)
    implementation project(':OpenAudioMc:API')
//    implementation project(':OpenAudioMc:OA-PaperUserAdapter')
    implementation project(':OpenAudioMc:OA-WorldguardIntegration')
    implementation project(':OpenAudioMc:OA-WorldGuardLegacy')
    implementation project(':OpenAudioMc:OA-WorldGuardModern')

    // Provided dependencies (these will NOT be shaded)
    compileOnly deps.folia
    compileOnly deps.bungeeProxy
    compileOnly deps.bungeeProtocol
    compileOnly deps.bungeeApi
    compileOnly deps.traincarts
    compileOnly deps.bkcommonlib
    compileOnly deps.velocityApi
    compileOnly deps.litebans
    compileOnly deps.essentialsx
    compileOnly deps.placeholderapi

    compileOnly deps.lombok.compileOnly
    annotationProcessor deps.lombok.annotationProcessor

    // Test dependencies
    testImplementation 'com.coreoz:wisp:2.4.0'
    testImplementation 'junit:junit:4.13.2'
}

java {
    withSourcesJar()
    withJavadocJar()
}

// Configure the Shadow plugin
shadowJar {
    archiveBaseName = 'openaudiomc'
    archiveClassifier = '' // This removes the '-all' suffix from the JAR name

    // Relocations to match your Maven configuration
    relocate 'de.tr7zw.changeme.nbtapi', 'com.craftmend.thirdparty.nbt'
    relocate 'io', 'com.craftmend.thirdparty.io', {
        // Exclude netty classes to not break invocations with bungee
        exclude 'io.papermc.**'
        exclude 'io.netty.**'
    }
    relocate 'org.json', 'com.craftmend.thirdparty.json'
    relocate 'reactor', 'com.craftmend.thirdparty.reactor'
    relocate 'okhttp3', 'com.craftmend.thirdparty.okhttp3'
    relocate 'okio', 'com.craftmend.thirdparty.okio'
    relocate 'org.projectlombok', 'com.craftmend.thirdparty.org'
    relocate 'org.mapdb', 'com.craftmend.thirdparty.mapdb'
    relocate 'kotlin', 'com.craftmend.thirdparty.kotlin'

    // Exclude duplicate files and signing files
    exclude 'META-INF/*'
    exclude 'META-INF'

    // Merge service files instead of excluding them
    mergeServiceFiles()

//    // Transform to handle duplicate entries
//    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
//        resource = 'META-INF/spring.handlers'
//    }
//    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
//        resource = 'META-INF/spring.schemas'
//    }
}

// Make javadoc ignore errors
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
}

// Configure the regular jar task (optional - you might want to disable it)
jar {
    dependsOn project(':OpenAudioMc:API').tasks.named('jar')
    archiveBaseName = 'openaudiomc'
    archiveClassifier = 'thin' // Mark as thin jar

    // Exclude duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Exclude test dependencies
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

// Make build depend on shadowJar instead of jar
build {
    dependsOn shadowJar
}

// TODO: 22.07.2025 14:19 - tjorven:
// Configure publishing to use the shadow jar
//publishing {
//    publications {
//        maven(MavenPublication) {
//            // Use the shadow jar as the main artifact
//            artifact shadowJar
//            artifact sourcesJar
//            artifact javadocJar
//
//            groupId = project.group
//            artifactId = 'openaudiomc'
//            version = project.version
//
//            // Configure the POM
//            pom {
//                name = 'OpenAudioMc'
//                description = 'The OpenAudioMc Java plugin and Api'
//                url = 'https://openaudiomc.net/'
//            }
//        }
//    }
//
//    repositories {
//        maven {
//            name = 'github'
//            url = uri('https://maven.pkg.github.com/Mindgamesnl/OpenAudioMc')
//            credentials {
//                username = System.getenv('GITHUB_ACTOR')
//                password = System.getenv('GITHUB_TOKEN')
//            }
//        }
//    }
//}

def placeholder = "@OA_VERSION@"
def versionValue = project.version.toString()

tasks.register('replaceVersionPlaceholders') {
    description = 'Replaces @OA_VERSION@ in all source and resource files with the project version.'
    group = 'build'

    // Define file extensions to process
    def extensions = ['java', 'kt', 'json', 'txt', 'html', 'xml', 'properties', 'yml', 'yaml']

    doLast {
        // Define the directories to search
        def dirs = [
                file('src/main/java'),
                file('src/main/resources'),
                file('src/test/java'),
                file('src/test/resources')
        ]

        dirs.each { dir ->
            if (!dir.exists()) return

            dir.eachFileRecurse { file ->
                if (file.isFile() && extensions.any { file.name.endsWith(it) }) {
                    def content = file.getText('UTF-8')
                    def newContent = content.replace(placeholder, versionValue)
                    if (content != newContent) {
                        file.write(newContent, 'UTF-8')
                        println "Updated: ${file}"
                    }
                }
            }
        }
    }
}

compileJava.dependsOn replaceVersionPlaceholders
processResources.dependsOn replaceVersionPlaceholders

